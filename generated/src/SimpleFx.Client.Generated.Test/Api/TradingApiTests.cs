/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SimpleFx.Client.Generated.Client;
using SimpleFx.Client.Generated.Api;
using SimpleFx.Client.Generated.Model;

namespace SimpleFx.Client.Generated.Test
{
    /// <summary>
    ///  Class for testing TradingApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TradingApiTests : IDisposable
    {
        private TradingApi instance;

        public TradingApiTests()
        {
            instance = new TradingApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TradingApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TradingApi
            //Assert.IsType(typeof(TradingApi), instance, "instance is a TradingApi");
        }

        
        /// <summary>
        /// Test V3TradingCloseAllBySymbol
        /// </summary>
        [Fact]
        public void V3TradingCloseAllBySymbolTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseAllBySymbolModel closeAllBySymbolModel = null;
            //instance.V3TradingCloseAllBySymbol(closeAllBySymbolModel);
            
        }
        
        /// <summary>
        /// Test V3TradingCloseMany
        /// </summary>
        [Fact]
        public void V3TradingCloseManyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseManyModel closeManyModel = null;
            //instance.V3TradingCloseMany(closeManyModel);
            
        }
        
        /// <summary>
        /// Test V3TradingCloseMarketOrder
        /// </summary>
        [Fact]
        public void V3TradingCloseMarketOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloseMarketOrderModel closeMarketOrderModel = null;
            //instance.V3TradingCloseMarketOrder(closeMarketOrderModel);
            
        }
        
        /// <summary>
        /// Test V3TradingDeletePendingOrder
        /// </summary>
        [Fact]
        public void V3TradingDeletePendingOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeletePendingOrderModel deletePendingOrderModel = null;
            //instance.V3TradingDeletePendingOrder(deletePendingOrderModel);
            
        }
        
        /// <summary>
        /// Test V3TradingGetActiveOrders
        /// </summary>
        [Fact]
        public void V3TradingGetActiveOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject2 inlineObject2 = null;
            //instance.V3TradingGetActiveOrders(inlineObject2);
            
        }
        
        /// <summary>
        /// Test V3TradingGetHistoryOrders
        /// </summary>
        [Fact]
        public void V3TradingGetHistoryOrdersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject3 inlineObject3 = null;
            //instance.V3TradingGetHistoryOrders(inlineObject3);
            
        }
        
        /// <summary>
        /// Test V3TradingOpenMarketOrder
        /// </summary>
        [Fact]
        public void V3TradingOpenMarketOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OpenMarketOrderModel openMarketOrderModel = null;
            //instance.V3TradingOpenMarketOrder(openMarketOrderModel);
            
        }
        
        /// <summary>
        /// Test V3TradingOpenPendingOrder
        /// </summary>
        [Fact]
        public void V3TradingOpenPendingOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OpenPendingOrderModel openPendingOrderModel = null;
            //instance.V3TradingOpenPendingOrder(openPendingOrderModel);
            
        }
        
        /// <summary>
        /// Test V3TradingUpdateMarketOrder
        /// </summary>
        [Fact]
        public void V3TradingUpdateMarketOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject1 inlineObject1 = null;
            //var response = instance.V3TradingUpdateMarketOrder(inlineObject1);
            //Assert.IsType<InlineResponse2004> (response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test V3TradingUpdateOrder
        /// </summary>
        [Fact]
        public void V3TradingUpdateOrderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateOrderModel updateOrderModel = null;
            //instance.V3TradingUpdateOrder(updateOrderModel);
            
        }
        
    }

}
