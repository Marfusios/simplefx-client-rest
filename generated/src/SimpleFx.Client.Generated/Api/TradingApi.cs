/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SimpleFx.Client.Generated.Client;
using SimpleFx.Client.Generated.Model;

namespace SimpleFx.Client.Generated.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clear position on symbol.
        /// </summary>
        /// <remarks>
        /// Closes all positions opened on specified symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns></returns>
        void V3TradingCloseAllBySymbol (CloseAllBySymbolModel closeAllBySymbolModel);

        /// <summary>
        /// Clear position on symbol.
        /// </summary>
        /// <remarks>
        /// Closes all positions opened on specified symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingCloseAllBySymbolWithHttpInfo (CloseAllBySymbolModel closeAllBySymbolModel);
        /// <summary>
        /// Close multiple positions.
        /// </summary>
        /// <remarks>
        /// Close selected positions on single symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns></returns>
        void V3TradingCloseMany (CloseManyModel closeManyModel);

        /// <summary>
        /// Close multiple positions.
        /// </summary>
        /// <remarks>
        /// Close selected positions on single symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingCloseManyWithHttpInfo (CloseManyModel closeManyModel);
        /// <summary>
        /// Close single position.
        /// </summary>
        /// <remarks>
        /// Close selected position. Or patialy close this position by specified volume.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns></returns>
        void V3TradingCloseMarketOrder (CloseMarketOrderModel closeMarketOrderModel);

        /// <summary>
        /// Close single position.
        /// </summary>
        /// <remarks>
        /// Close selected position. Or patialy close this position by specified volume.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingCloseMarketOrderWithHttpInfo (CloseMarketOrderModel closeMarketOrderModel);
        /// <summary>
        /// Cancel pending order.
        /// </summary>
        /// <remarks>
        /// Cancel pending order that has not been activated yet.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns></returns>
        void V3TradingDeletePendingOrder (DeletePendingOrderModel deletePendingOrderModel);

        /// <summary>
        /// Cancel pending order.
        /// </summary>
        /// <remarks>
        /// Cancel pending order that has not been activated yet.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingDeletePendingOrderWithHttpInfo (DeletePendingOrderModel deletePendingOrderModel);
        /// <summary>
        /// Get positions and pending orders.
        /// </summary>
        /// <remarks>
        /// Lists all active opened positions and active pending orders.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns></returns>
        void V3TradingGetActiveOrders (InlineObject2 inlineObject2);

        /// <summary>
        /// Get positions and pending orders.
        /// </summary>
        /// <remarks>
        /// Lists all active opened positions and active pending orders.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingGetActiveOrdersWithHttpInfo (InlineObject2 inlineObject2);
        /// <summary>
        /// Get closed/inactive orders and positions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns></returns>
        void V3TradingGetHistoryOrders (InlineObject3 inlineObject3);

        /// <summary>
        /// Get closed/inactive orders and positions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingGetHistoryOrdersWithHttpInfo (InlineObject3 inlineObject3);
        /// <summary>
        /// BUY or SELL by market price
        /// </summary>
        /// <remarks>
        /// Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns></returns>
        void V3TradingOpenMarketOrder (OpenMarketOrderModel openMarketOrderModel);

        /// <summary>
        /// BUY or SELL by market price
        /// </summary>
        /// <remarks>
        /// Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingOpenMarketOrderWithHttpInfo (OpenMarketOrderModel openMarketOrderModel);
        /// <summary>
        /// Place pending order
        /// </summary>
        /// <remarks>
        /// Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns></returns>
        void V3TradingOpenPendingOrder (OpenPendingOrderModel openPendingOrderModel);

        /// <summary>
        /// Place pending order
        /// </summary>
        /// <remarks>
        /// Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingOpenPendingOrderWithHttpInfo (OpenPendingOrderModel openPendingOrderModel);
        /// <summary>
        /// Change takeprofit or stoploss of position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 V3TradingUpdateMarketOrder (InlineObject1 inlineObject1);

        /// <summary>
        /// Change takeprofit or stoploss of position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> V3TradingUpdateMarketOrderWithHttpInfo (InlineObject1 inlineObject1);
        /// <summary>
        /// Modify pending order.
        /// </summary>
        /// <remarks>
        /// Change parameters of this order
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns></returns>
        void V3TradingUpdateOrder (UpdateOrderModel updateOrderModel);

        /// <summary>
        /// Modify pending order.
        /// </summary>
        /// <remarks>
        /// Change parameters of this order
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V3TradingUpdateOrderWithHttpInfo (UpdateOrderModel updateOrderModel);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Clear position on symbol.
        /// </summary>
        /// <remarks>
        /// Closes all positions opened on specified symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingCloseAllBySymbolAsync (CloseAllBySymbolModel closeAllBySymbolModel);

        /// <summary>
        /// Clear position on symbol.
        /// </summary>
        /// <remarks>
        /// Closes all positions opened on specified symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingCloseAllBySymbolAsyncWithHttpInfo (CloseAllBySymbolModel closeAllBySymbolModel);
        /// <summary>
        /// Close multiple positions.
        /// </summary>
        /// <remarks>
        /// Close selected positions on single symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingCloseManyAsync (CloseManyModel closeManyModel);

        /// <summary>
        /// Close multiple positions.
        /// </summary>
        /// <remarks>
        /// Close selected positions on single symbol.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingCloseManyAsyncWithHttpInfo (CloseManyModel closeManyModel);
        /// <summary>
        /// Close single position.
        /// </summary>
        /// <remarks>
        /// Close selected position. Or patialy close this position by specified volume.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingCloseMarketOrderAsync (CloseMarketOrderModel closeMarketOrderModel);

        /// <summary>
        /// Close single position.
        /// </summary>
        /// <remarks>
        /// Close selected position. Or patialy close this position by specified volume.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingCloseMarketOrderAsyncWithHttpInfo (CloseMarketOrderModel closeMarketOrderModel);
        /// <summary>
        /// Cancel pending order.
        /// </summary>
        /// <remarks>
        /// Cancel pending order that has not been activated yet.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingDeletePendingOrderAsync (DeletePendingOrderModel deletePendingOrderModel);

        /// <summary>
        /// Cancel pending order.
        /// </summary>
        /// <remarks>
        /// Cancel pending order that has not been activated yet.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingDeletePendingOrderAsyncWithHttpInfo (DeletePendingOrderModel deletePendingOrderModel);
        /// <summary>
        /// Get positions and pending orders.
        /// </summary>
        /// <remarks>
        /// Lists all active opened positions and active pending orders.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingGetActiveOrdersAsync (InlineObject2 inlineObject2);

        /// <summary>
        /// Get positions and pending orders.
        /// </summary>
        /// <remarks>
        /// Lists all active opened positions and active pending orders.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingGetActiveOrdersAsyncWithHttpInfo (InlineObject2 inlineObject2);
        /// <summary>
        /// Get closed/inactive orders and positions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingGetHistoryOrdersAsync (InlineObject3 inlineObject3);

        /// <summary>
        /// Get closed/inactive orders and positions.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingGetHistoryOrdersAsyncWithHttpInfo (InlineObject3 inlineObject3);
        /// <summary>
        /// BUY or SELL by market price
        /// </summary>
        /// <remarks>
        /// Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingOpenMarketOrderAsync (OpenMarketOrderModel openMarketOrderModel);

        /// <summary>
        /// BUY or SELL by market price
        /// </summary>
        /// <remarks>
        /// Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingOpenMarketOrderAsyncWithHttpInfo (OpenMarketOrderModel openMarketOrderModel);
        /// <summary>
        /// Place pending order
        /// </summary>
        /// <remarks>
        /// Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingOpenPendingOrderAsync (OpenPendingOrderModel openPendingOrderModel);

        /// <summary>
        /// Place pending order
        /// </summary>
        /// <remarks>
        /// Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingOpenPendingOrderAsyncWithHttpInfo (OpenPendingOrderModel openPendingOrderModel);
        /// <summary>
        /// Change takeprofit or stoploss of position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> V3TradingUpdateMarketOrderAsync (InlineObject1 inlineObject1);

        /// <summary>
        /// Change takeprofit or stoploss of position
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> V3TradingUpdateMarketOrderAsyncWithHttpInfo (InlineObject1 inlineObject1);
        /// <summary>
        /// Modify pending order.
        /// </summary>
        /// <remarks>
        /// Change parameters of this order
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V3TradingUpdateOrderAsync (UpdateOrderModel updateOrderModel);

        /// <summary>
        /// Modify pending order.
        /// </summary>
        /// <remarks>
        /// Change parameters of this order
        /// </remarks>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V3TradingUpdateOrderAsyncWithHttpInfo (UpdateOrderModel updateOrderModel);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITradingApi : ITradingApiSync, ITradingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TradingApi : ITradingApi
    {
        private SimpleFx.Client.Generated.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TradingApi(String basePath)
        {
            this.Configuration = SimpleFx.Client.Generated.Client.Configuration.MergeConfigurations(
                SimpleFx.Client.Generated.Client.GlobalConfiguration.Instance,
                new SimpleFx.Client.Generated.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SimpleFx.Client.Generated.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimpleFx.Client.Generated.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = SimpleFx.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TradingApi(SimpleFx.Client.Generated.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SimpleFx.Client.Generated.Client.Configuration.MergeConfigurations(
                SimpleFx.Client.Generated.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SimpleFx.Client.Generated.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new SimpleFx.Client.Generated.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = SimpleFx.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TradingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TradingApi(SimpleFx.Client.Generated.Client.ISynchronousClient client,SimpleFx.Client.Generated.Client.IAsynchronousClient asyncClient, SimpleFx.Client.Generated.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SimpleFx.Client.Generated.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SimpleFx.Client.Generated.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SimpleFx.Client.Generated.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SimpleFx.Client.Generated.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SimpleFx.Client.Generated.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Clear position on symbol. Closes all positions opened on specified symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns></returns>
        public void V3TradingCloseAllBySymbol (CloseAllBySymbolModel closeAllBySymbolModel)
        {
             V3TradingCloseAllBySymbolWithHttpInfo(closeAllBySymbolModel);
        }

        /// <summary>
        /// Clear position on symbol. Closes all positions opened on specified symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingCloseAllBySymbolWithHttpInfo (CloseAllBySymbolModel closeAllBySymbolModel)
        {
            // verify the required parameter 'closeAllBySymbolModel' is set
            if (closeAllBySymbolModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'closeAllBySymbolModel' when calling TradingApi->V3TradingCloseAllBySymbol");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = closeAllBySymbolModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/trading/orders/market/bysymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingCloseAllBySymbol", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Clear position on symbol. Closes all positions opened on specified symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingCloseAllBySymbolAsync (CloseAllBySymbolModel closeAllBySymbolModel)
        {
             await V3TradingCloseAllBySymbolAsyncWithHttpInfo(closeAllBySymbolModel);

        }

        /// <summary>
        /// Clear position on symbol. Closes all positions opened on specified symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeAllBySymbolModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingCloseAllBySymbolAsyncWithHttpInfo (CloseAllBySymbolModel closeAllBySymbolModel)
        {
            // verify the required parameter 'closeAllBySymbolModel' is set
            if (closeAllBySymbolModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'closeAllBySymbolModel' when calling TradingApi->V3TradingCloseAllBySymbol");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = closeAllBySymbolModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/trading/orders/market/bysymbol", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingCloseAllBySymbol", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close multiple positions. Close selected positions on single symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns></returns>
        public void V3TradingCloseMany (CloseManyModel closeManyModel)
        {
             V3TradingCloseManyWithHttpInfo(closeManyModel);
        }

        /// <summary>
        /// Close multiple positions. Close selected positions on single symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingCloseManyWithHttpInfo (CloseManyModel closeManyModel)
        {
            // verify the required parameter 'closeManyModel' is set
            if (closeManyModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'closeManyModel' when calling TradingApi->V3TradingCloseMany");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = closeManyModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/trading/orders/market/closemany", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingCloseMany", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close multiple positions. Close selected positions on single symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingCloseManyAsync (CloseManyModel closeManyModel)
        {
             await V3TradingCloseManyAsyncWithHttpInfo(closeManyModel);

        }

        /// <summary>
        /// Close multiple positions. Close selected positions on single symbol.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeManyModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingCloseManyAsyncWithHttpInfo (CloseManyModel closeManyModel)
        {
            // verify the required parameter 'closeManyModel' is set
            if (closeManyModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'closeManyModel' when calling TradingApi->V3TradingCloseMany");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = closeManyModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/trading/orders/market/closemany", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingCloseMany", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close single position. Close selected position. Or patialy close this position by specified volume.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns></returns>
        public void V3TradingCloseMarketOrder (CloseMarketOrderModel closeMarketOrderModel)
        {
             V3TradingCloseMarketOrderWithHttpInfo(closeMarketOrderModel);
        }

        /// <summary>
        /// Close single position. Close selected position. Or patialy close this position by specified volume.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingCloseMarketOrderWithHttpInfo (CloseMarketOrderModel closeMarketOrderModel)
        {
            // verify the required parameter 'closeMarketOrderModel' is set
            if (closeMarketOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'closeMarketOrderModel' when calling TradingApi->V3TradingCloseMarketOrder");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = closeMarketOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/trading/orders/market", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingCloseMarketOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close single position. Close selected position. Or patialy close this position by specified volume.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingCloseMarketOrderAsync (CloseMarketOrderModel closeMarketOrderModel)
        {
             await V3TradingCloseMarketOrderAsyncWithHttpInfo(closeMarketOrderModel);

        }

        /// <summary>
        /// Close single position. Close selected position. Or patialy close this position by specified volume.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="closeMarketOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingCloseMarketOrderAsyncWithHttpInfo (CloseMarketOrderModel closeMarketOrderModel)
        {
            // verify the required parameter 'closeMarketOrderModel' is set
            if (closeMarketOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'closeMarketOrderModel' when calling TradingApi->V3TradingCloseMarketOrder");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = closeMarketOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/trading/orders/market", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingCloseMarketOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel pending order. Cancel pending order that has not been activated yet.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns></returns>
        public void V3TradingDeletePendingOrder (DeletePendingOrderModel deletePendingOrderModel)
        {
             V3TradingDeletePendingOrderWithHttpInfo(deletePendingOrderModel);
        }

        /// <summary>
        /// Cancel pending order. Cancel pending order that has not been activated yet.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingDeletePendingOrderWithHttpInfo (DeletePendingOrderModel deletePendingOrderModel)
        {
            // verify the required parameter 'deletePendingOrderModel' is set
            if (deletePendingOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'deletePendingOrderModel' when calling TradingApi->V3TradingDeletePendingOrder");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = deletePendingOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/v3/trading/orders/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingDeletePendingOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel pending order. Cancel pending order that has not been activated yet.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingDeletePendingOrderAsync (DeletePendingOrderModel deletePendingOrderModel)
        {
             await V3TradingDeletePendingOrderAsyncWithHttpInfo(deletePendingOrderModel);

        }

        /// <summary>
        /// Cancel pending order. Cancel pending order that has not been activated yet.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deletePendingOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingDeletePendingOrderAsyncWithHttpInfo (DeletePendingOrderModel deletePendingOrderModel)
        {
            // verify the required parameter 'deletePendingOrderModel' is set
            if (deletePendingOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'deletePendingOrderModel' when calling TradingApi->V3TradingDeletePendingOrder");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = deletePendingOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/v3/trading/orders/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingDeletePendingOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get positions and pending orders. Lists all active opened positions and active pending orders.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns></returns>
        public void V3TradingGetActiveOrders (InlineObject2 inlineObject2)
        {
             V3TradingGetActiveOrdersWithHttpInfo(inlineObject2);
        }

        /// <summary>
        /// Get positions and pending orders. Lists all active opened positions and active pending orders.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingGetActiveOrdersWithHttpInfo (InlineObject2 inlineObject2)
        {
            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling TradingApi->V3TradingGetActiveOrders");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject2;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/trading/orders/active", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingGetActiveOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get positions and pending orders. Lists all active opened positions and active pending orders.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingGetActiveOrdersAsync (InlineObject2 inlineObject2)
        {
             await V3TradingGetActiveOrdersAsyncWithHttpInfo(inlineObject2);

        }

        /// <summary>
        /// Get positions and pending orders. Lists all active opened positions and active pending orders.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject2"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingGetActiveOrdersAsyncWithHttpInfo (InlineObject2 inlineObject2)
        {
            // verify the required parameter 'inlineObject2' is set
            if (inlineObject2 == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'inlineObject2' when calling TradingApi->V3TradingGetActiveOrders");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject2;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/trading/orders/active", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingGetActiveOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get closed/inactive orders and positions. 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns></returns>
        public void V3TradingGetHistoryOrders (InlineObject3 inlineObject3)
        {
             V3TradingGetHistoryOrdersWithHttpInfo(inlineObject3);
        }

        /// <summary>
        /// Get closed/inactive orders and positions. 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingGetHistoryOrdersWithHttpInfo (InlineObject3 inlineObject3)
        {
            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling TradingApi->V3TradingGetHistoryOrders");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject3;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/trading/orders/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingGetHistoryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get closed/inactive orders and positions. 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingGetHistoryOrdersAsync (InlineObject3 inlineObject3)
        {
             await V3TradingGetHistoryOrdersAsyncWithHttpInfo(inlineObject3);

        }

        /// <summary>
        /// Get closed/inactive orders and positions. 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject3"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingGetHistoryOrdersAsyncWithHttpInfo (InlineObject3 inlineObject3)
        {
            // verify the required parameter 'inlineObject3' is set
            if (inlineObject3 == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'inlineObject3' when calling TradingApi->V3TradingGetHistoryOrders");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject3;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/trading/orders/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingGetHistoryOrders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// BUY or SELL by market price Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns></returns>
        public void V3TradingOpenMarketOrder (OpenMarketOrderModel openMarketOrderModel)
        {
             V3TradingOpenMarketOrderWithHttpInfo(openMarketOrderModel);
        }

        /// <summary>
        /// BUY or SELL by market price Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingOpenMarketOrderWithHttpInfo (OpenMarketOrderModel openMarketOrderModel)
        {
            // verify the required parameter 'openMarketOrderModel' is set
            if (openMarketOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'openMarketOrderModel' when calling TradingApi->V3TradingOpenMarketOrder");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = openMarketOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/trading/orders/market", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingOpenMarketOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// BUY or SELL by market price Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingOpenMarketOrderAsync (OpenMarketOrderModel openMarketOrderModel)
        {
             await V3TradingOpenMarketOrderAsyncWithHttpInfo(openMarketOrderModel);

        }

        /// <summary>
        /// BUY or SELL by market price Buy or sell assests now.   Depending on IsFIFO property, closes open positions with FIFO rule or opens a new - possibly hedged - position.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openMarketOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingOpenMarketOrderAsyncWithHttpInfo (OpenMarketOrderModel openMarketOrderModel)
        {
            // verify the required parameter 'openMarketOrderModel' is set
            if (openMarketOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'openMarketOrderModel' when calling TradingApi->V3TradingOpenMarketOrder");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = openMarketOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/trading/orders/market", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingOpenMarketOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place pending order Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns></returns>
        public void V3TradingOpenPendingOrder (OpenPendingOrderModel openPendingOrderModel)
        {
             V3TradingOpenPendingOrderWithHttpInfo(openPendingOrderModel);
        }

        /// <summary>
        /// Place pending order Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingOpenPendingOrderWithHttpInfo (OpenPendingOrderModel openPendingOrderModel)
        {
            // verify the required parameter 'openPendingOrderModel' is set
            if (openPendingOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'openPendingOrderModel' when calling TradingApi->V3TradingOpenPendingOrder");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = openPendingOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/v3/trading/orders/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingOpenPendingOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place pending order Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingOpenPendingOrderAsync (OpenPendingOrderModel openPendingOrderModel)
        {
             await V3TradingOpenPendingOrderAsyncWithHttpInfo(openPendingOrderModel);

        }

        /// <summary>
        /// Place pending order Place an order activated when price reaches @ActivationPrice.   &lt;br /&gt;When @Instrument price reaches @ActivationPrice the order is imiedietly executed on market price.
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="openPendingOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingOpenPendingOrderAsyncWithHttpInfo (OpenPendingOrderModel openPendingOrderModel)
        {
            // verify the required parameter 'openPendingOrderModel' is set
            if (openPendingOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'openPendingOrderModel' when calling TradingApi->V3TradingOpenPendingOrder");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = openPendingOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/v3/trading/orders/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingOpenPendingOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change takeprofit or stoploss of position 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 V3TradingUpdateMarketOrder (InlineObject1 inlineObject1)
        {
             SimpleFx.Client.Generated.Client.ApiResponse<InlineResponse2004> localVarResponse = V3TradingUpdateMarketOrderWithHttpInfo(inlineObject1);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change takeprofit or stoploss of position 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse< InlineResponse2004 > V3TradingUpdateMarketOrderWithHttpInfo (InlineObject1 inlineObject1)
        {
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling TradingApi->V3TradingUpdateMarketOrder");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = inlineObject1;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put< InlineResponse2004 >("/api/v3/trading/orders/market", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingUpdateMarketOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Change takeprofit or stoploss of position 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> V3TradingUpdateMarketOrderAsync (InlineObject1 inlineObject1)
        {
             SimpleFx.Client.Generated.Client.ApiResponse<InlineResponse2004> localVarResponse = await V3TradingUpdateMarketOrderAsyncWithHttpInfo(inlineObject1);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change takeprofit or stoploss of position 
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inlineObject1"></param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<InlineResponse2004>> V3TradingUpdateMarketOrderAsyncWithHttpInfo (InlineObject1 inlineObject1)
        {
            // verify the required parameter 'inlineObject1' is set
            if (inlineObject1 == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'inlineObject1' when calling TradingApi->V3TradingUpdateMarketOrder");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = inlineObject1;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<InlineResponse2004>("/api/v3/trading/orders/market", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingUpdateMarketOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify pending order. Change parameters of this order
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns></returns>
        public void V3TradingUpdateOrder (UpdateOrderModel updateOrderModel)
        {
             V3TradingUpdateOrderWithHttpInfo(updateOrderModel);
        }

        /// <summary>
        /// Modify pending order. Change parameters of this order
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public SimpleFx.Client.Generated.Client.ApiResponse<Object> V3TradingUpdateOrderWithHttpInfo (UpdateOrderModel updateOrderModel)
        {
            // verify the required parameter 'updateOrderModel' is set
            if (updateOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'updateOrderModel' when calling TradingApi->V3TradingUpdateOrder");

            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SimpleFx.Client.Generated.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/api/v3/trading/orders/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingUpdateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Modify pending order. Change parameters of this order
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V3TradingUpdateOrderAsync (UpdateOrderModel updateOrderModel)
        {
             await V3TradingUpdateOrderAsyncWithHttpInfo(updateOrderModel);

        }

        /// <summary>
        /// Modify pending order. Change parameters of this order
        /// </summary>
        /// <exception cref="SimpleFx.Client.Generated.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateOrderModel"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<SimpleFx.Client.Generated.Client.ApiResponse<Object>> V3TradingUpdateOrderAsyncWithHttpInfo (UpdateOrderModel updateOrderModel)
        {
            // verify the required parameter 'updateOrderModel' is set
            if (updateOrderModel == null)
                throw new SimpleFx.Client.Generated.Client.ApiException(400, "Missing required parameter 'updateOrderModel' when calling TradingApi->V3TradingUpdateOrder");


            SimpleFx.Client.Generated.Client.RequestOptions localVarRequestOptions = new SimpleFx.Client.Generated.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = updateOrderModel;

            // authentication (bearerAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(this.Configuration.Username) || !String.IsNullOrEmpty(this.Configuration.Password))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Basic " + SimpleFx.Client.Generated.Client.ClientUtils.Base64Encode(this.Configuration.Username + ":" + this.Configuration.Password));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/api/v3/trading/orders/pending", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V3TradingUpdateOrder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
