/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// CloseManyModel
    /// </summary>
    [DataContract]
    public partial class CloseManyModel :  IEquatable<CloseManyModel>, IValidatableObject
    {
        /// <summary>
        /// Account LIVE or DEMO
        /// </summary>
        /// <value>Account LIVE or DEMO</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RealityEnum
        {
            /// <summary>
            /// Enum DEMO for value: DEMO
            /// </summary>
            [EnumMember(Value = "DEMO")]
            DEMO = 1,

            /// <summary>
            /// Enum LIVE for value: LIVE
            /// </summary>
            [EnumMember(Value = "LIVE")]
            LIVE = 2

        }

        /// <summary>
        /// Account LIVE or DEMO
        /// </summary>
        /// <value>Account LIVE or DEMO</value>
        [DataMember(Name="Reality", EmitDefaultValue=false)]
        public RealityEnum Reality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CloseManyModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CloseManyModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CloseManyModel" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="orderIds">orderIds (required).</param>
        /// <param name="requestId">requestId.</param>
        /// <param name="login">AccountNumber (required).</param>
        /// <param name="reality">Account LIVE or DEMO (required).</param>
        public CloseManyModel(string symbol = default(string), List<long> orderIds = default(List<long>), string requestId = default(string), long login = default(long), RealityEnum reality = default(RealityEnum))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for CloseManyModel and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }

            // to ensure "orderIds" is required (not null)
            if (orderIds == null)
            {
                throw new InvalidDataException("orderIds is a required property for CloseManyModel and cannot be null");
            }
            else
            {
                this.OrderIds = orderIds;
            }

            // to ensure "login" is required (not null)
            if (login == null)
            {
                throw new InvalidDataException("login is a required property for CloseManyModel and cannot be null");
            }
            else
            {
                this.Login = login;
            }

            this.Reality = reality;
            this.RequestId = requestId;
        }
        
        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="Symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets OrderIds
        /// </summary>
        [DataMember(Name="OrderIds", EmitDefaultValue=false)]
        public List<long> OrderIds { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name="RequestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// AccountNumber
        /// </summary>
        /// <value>AccountNumber</value>
        [DataMember(Name="Login", EmitDefaultValue=false)]
        public long Login { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloseManyModel {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  OrderIds: ").Append(OrderIds).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Reality: ").Append(Reality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloseManyModel);
        }

        /// <summary>
        /// Returns true if CloseManyModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CloseManyModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloseManyModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.OrderIds == input.OrderIds ||
                    this.OrderIds != null &&
                    input.OrderIds != null &&
                    this.OrderIds.SequenceEqual(input.OrderIds)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.Login == input.Login ||
                    this.Login.Equals(input.Login)
                ) && 
                (
                    this.Reality == input.Reality ||
                    this.Reality.Equals(input.Reality)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.OrderIds != null)
                    hashCode = hashCode * 59 + this.OrderIds.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                hashCode = hashCode * 59 + this.Login.GetHashCode();
                hashCode = hashCode * 59 + this.Reality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
