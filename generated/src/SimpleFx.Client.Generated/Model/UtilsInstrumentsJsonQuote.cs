/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// Hint price from the past
    /// </summary>
    [DataContract]
    public partial class UtilsInstrumentsJsonQuote :  IEquatable<UtilsInstrumentsJsonQuote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsInstrumentsJsonQuote" /> class.
        /// </summary>
        /// <param name="a">Ask price aka offer.</param>
        /// <param name="b">Bid.</param>
        /// <param name="t">Unix timestamp of this price..</param>
        public UtilsInstrumentsJsonQuote(double a = default(double), double b = default(double), decimal t = default(decimal))
        {
            this.A = a;
            this.B = b;
            this.T = t;
        }
        
        /// <summary>
        /// Ask price aka offer
        /// </summary>
        /// <value>Ask price aka offer</value>
        [DataMember(Name="a", EmitDefaultValue=false)]
        public double A { get; set; }

        /// <summary>
        /// Bid
        /// </summary>
        /// <value>Bid</value>
        [DataMember(Name="b", EmitDefaultValue=false)]
        public double B { get; set; }

        /// <summary>
        /// Unix timestamp of this price.
        /// </summary>
        /// <value>Unix timestamp of this price.</value>
        [DataMember(Name="t", EmitDefaultValue=false)]
        public decimal T { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilsInstrumentsJsonQuote {\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("  B: ").Append(B).Append("\n");
            sb.Append("  T: ").Append(T).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UtilsInstrumentsJsonQuote);
        }

        /// <summary>
        /// Returns true if UtilsInstrumentsJsonQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of UtilsInstrumentsJsonQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilsInstrumentsJsonQuote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.A == input.A ||
                    this.A.Equals(input.A)
                ) && 
                (
                    this.B == input.B ||
                    this.B.Equals(input.B)
                ) && 
                (
                    this.T == input.T ||
                    this.T.Equals(input.T)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.A.GetHashCode();
                hashCode = hashCode * 59 + this.B.GetHashCode();
                hashCode = hashCode * 59 + this.T.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
