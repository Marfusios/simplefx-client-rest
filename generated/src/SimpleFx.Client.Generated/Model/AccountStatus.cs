/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// Static balance and floating equity.
    /// </summary>
    [DataContract]
    public partial class AccountStatus :  IEquatable<AccountStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountStatus" /> class.
        /// </summary>
        /// <param name="balance">Current account balance..</param>
        /// <param name="equity">Balance + profit of opened positions. Depends on current market price..</param>
        /// <param name="margin">Amount blocked for opened positions..</param>
        /// <param name="freeMargin">Equity - margin, amount free for opening new positions..</param>
        /// <param name="marginLevel">Margin level in percentage. Margin level of 100 mean all positions are covered, but there is no free margin for new positions..</param>
        public AccountStatus(decimal balance = default(decimal), decimal equity = default(decimal), decimal margin = default(decimal), decimal freeMargin = default(decimal), double marginLevel = default(double))
        {
            this.Balance = balance;
            this.Equity = equity;
            this.Margin = margin;
            this.FreeMargin = freeMargin;
            this.MarginLevel = marginLevel;
        }
        
        /// <summary>
        /// Current account balance.
        /// </summary>
        /// <value>Current account balance.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public decimal Balance { get; set; }

        /// <summary>
        /// Balance + profit of opened positions. Depends on current market price.
        /// </summary>
        /// <value>Balance + profit of opened positions. Depends on current market price.</value>
        [DataMember(Name="equity", EmitDefaultValue=false)]
        public decimal Equity { get; set; }

        /// <summary>
        /// Amount blocked for opened positions.
        /// </summary>
        /// <value>Amount blocked for opened positions.</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public decimal Margin { get; set; }

        /// <summary>
        /// Equity - margin, amount free for opening new positions.
        /// </summary>
        /// <value>Equity - margin, amount free for opening new positions.</value>
        [DataMember(Name="freeMargin", EmitDefaultValue=false)]
        public decimal FreeMargin { get; set; }

        /// <summary>
        /// Margin level in percentage. Margin level of 100 mean all positions are covered, but there is no free margin for new positions.
        /// </summary>
        /// <value>Margin level in percentage. Margin level of 100 mean all positions are covered, but there is no free margin for new positions.</value>
        [DataMember(Name="marginLevel", EmitDefaultValue=false)]
        public double MarginLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountStatus {\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  FreeMargin: ").Append(FreeMargin).Append("\n");
            sb.Append("  MarginLevel: ").Append(MarginLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountStatus);
        }

        /// <summary>
        /// Returns true if AccountStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Equity == input.Equity ||
                    (this.Equity != null &&
                    this.Equity.Equals(input.Equity))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.FreeMargin == input.FreeMargin ||
                    (this.FreeMargin != null &&
                    this.FreeMargin.Equals(input.FreeMargin))
                ) && 
                (
                    this.MarginLevel == input.MarginLevel ||
                    this.MarginLevel.Equals(input.MarginLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Equity != null)
                    hashCode = hashCode * 59 + this.Equity.GetHashCode();
                if (this.Margin != null)
                    hashCode = hashCode * 59 + this.Margin.GetHashCode();
                if (this.FreeMargin != null)
                    hashCode = hashCode * 59 + this.FreeMargin.GetHashCode();
                hashCode = hashCode * 59 + this.MarginLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
