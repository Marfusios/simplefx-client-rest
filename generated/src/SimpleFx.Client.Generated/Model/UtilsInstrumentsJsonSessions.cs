/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// UtilsInstrumentsJsonSessions
    /// </summary>
    [DataContract]
    public partial class UtilsInstrumentsJsonSessions :  IEquatable<UtilsInstrumentsJsonSessions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilsInstrumentsJsonSessions" /> class.
        /// </summary>
        /// <param name="open">session start in seconds from the begining of the week - from sunday 24:00/ sutarday 0:00 midnight.</param>
        /// <param name="close">session end in seconds from the begining of the week - from sunday 24:00/ sutarday 0:00 midnight.</param>
        public UtilsInstrumentsJsonSessions(int open = default(int), int close = default(int))
        {
            this.Open = open;
            this.Close = close;
        }
        
        /// <summary>
        /// session start in seconds from the begining of the week - from sunday 24:00/ sutarday 0:00 midnight
        /// </summary>
        /// <value>session start in seconds from the begining of the week - from sunday 24:00/ sutarday 0:00 midnight</value>
        [DataMember(Name="open", EmitDefaultValue=false)]
        public int Open { get; set; }

        /// <summary>
        /// session end in seconds from the begining of the week - from sunday 24:00/ sutarday 0:00 midnight
        /// </summary>
        /// <value>session end in seconds from the begining of the week - from sunday 24:00/ sutarday 0:00 midnight</value>
        [DataMember(Name="close", EmitDefaultValue=false)]
        public int Close { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilsInstrumentsJsonSessions {\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UtilsInstrumentsJsonSessions);
        }

        /// <summary>
        /// Returns true if UtilsInstrumentsJsonSessions instances are equal
        /// </summary>
        /// <param name="input">Instance of UtilsInstrumentsJsonSessions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilsInstrumentsJsonSessions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Open == input.Open ||
                    this.Open.Equals(input.Open)
                ) && 
                (
                    this.Close == input.Close ||
                    this.Close.Equals(input.Close)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Open.GetHashCode();
                hashCode = hashCode * 59 + this.Close.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
