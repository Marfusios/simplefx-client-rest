/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// MarketOrderAllOf
    /// </summary>
    [DataContract]
    public partial class MarketOrderAllOf :  IEquatable<MarketOrderAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketOrderAllOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MarketOrderAllOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketOrderAllOf" /> class.
        /// </summary>
        /// <param name="openTime">unixtimestamp in miliseconds (required).</param>
        /// <param name="openPrice">openPrice (required).</param>
        /// <param name="margin">Balance blocked for this position. (required).</param>
        /// <param name="profit">current profit/loss from this position. (required).</param>
        /// <param name="swaps">Overnight maintence of this position. (required).</param>
        /// <param name="openConversionRate">Convertion rate from position currency to account currency (required).</param>
        /// <param name="closeConversionRate">closeConversionRate.</param>
        public MarketOrderAllOf(decimal openTime = default(decimal), decimal openPrice = default(decimal), double margin = default(double), double profit = default(double), double swaps = default(double), double openConversionRate = default(double), double closeConversionRate = default(double))
        {
            // to ensure "openTime" is required (not null)
            if (openTime == null)
            {
                throw new InvalidDataException("openTime is a required property for MarketOrderAllOf and cannot be null");
            }
            else
            {
                this.OpenTime = openTime;
            }

            // to ensure "openPrice" is required (not null)
            if (openPrice == null)
            {
                throw new InvalidDataException("openPrice is a required property for MarketOrderAllOf and cannot be null");
            }
            else
            {
                this.OpenPrice = openPrice;
            }

            // to ensure "margin" is required (not null)
            if (margin == null)
            {
                throw new InvalidDataException("margin is a required property for MarketOrderAllOf and cannot be null");
            }
            else
            {
                this.Margin = margin;
            }

            // to ensure "profit" is required (not null)
            if (profit == null)
            {
                throw new InvalidDataException("profit is a required property for MarketOrderAllOf and cannot be null");
            }
            else
            {
                this.Profit = profit;
            }

            // to ensure "swaps" is required (not null)
            if (swaps == null)
            {
                throw new InvalidDataException("swaps is a required property for MarketOrderAllOf and cannot be null");
            }
            else
            {
                this.Swaps = swaps;
            }

            // to ensure "openConversionRate" is required (not null)
            if (openConversionRate == null)
            {
                throw new InvalidDataException("openConversionRate is a required property for MarketOrderAllOf and cannot be null");
            }
            else
            {
                this.OpenConversionRate = openConversionRate;
            }

            this.CloseConversionRate = closeConversionRate;
        }
        
        /// <summary>
        /// unixtimestamp in miliseconds
        /// </summary>
        /// <value>unixtimestamp in miliseconds</value>
        [DataMember(Name="openTime", EmitDefaultValue=false)]
        public decimal OpenTime { get; set; }

        /// <summary>
        /// Gets or Sets OpenPrice
        /// </summary>
        [DataMember(Name="openPrice", EmitDefaultValue=false)]
        public decimal OpenPrice { get; set; }

        /// <summary>
        /// Balance blocked for this position.
        /// </summary>
        /// <value>Balance blocked for this position.</value>
        [DataMember(Name="margin", EmitDefaultValue=false)]
        public double Margin { get; set; }

        /// <summary>
        /// current profit/loss from this position.
        /// </summary>
        /// <value>current profit/loss from this position.</value>
        [DataMember(Name="profit", EmitDefaultValue=false)]
        public double Profit { get; set; }

        /// <summary>
        /// Overnight maintence of this position.
        /// </summary>
        /// <value>Overnight maintence of this position.</value>
        [DataMember(Name="swaps", EmitDefaultValue=false)]
        public double Swaps { get; set; }

        /// <summary>
        /// Convertion rate from position currency to account currency
        /// </summary>
        /// <value>Convertion rate from position currency to account currency</value>
        [DataMember(Name="openConversionRate", EmitDefaultValue=false)]
        public double OpenConversionRate { get; set; }

        /// <summary>
        /// Gets or Sets CloseConversionRate
        /// </summary>
        [DataMember(Name="closeConversionRate", EmitDefaultValue=false)]
        public double CloseConversionRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MarketOrderAllOf {\n");
            sb.Append("  OpenTime: ").Append(OpenTime).Append("\n");
            sb.Append("  OpenPrice: ").Append(OpenPrice).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Profit: ").Append(Profit).Append("\n");
            sb.Append("  Swaps: ").Append(Swaps).Append("\n");
            sb.Append("  OpenConversionRate: ").Append(OpenConversionRate).Append("\n");
            sb.Append("  CloseConversionRate: ").Append(CloseConversionRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MarketOrderAllOf);
        }

        /// <summary>
        /// Returns true if MarketOrderAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of MarketOrderAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MarketOrderAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OpenTime == input.OpenTime ||
                    (this.OpenTime != null &&
                    this.OpenTime.Equals(input.OpenTime))
                ) && 
                (
                    this.OpenPrice == input.OpenPrice ||
                    (this.OpenPrice != null &&
                    this.OpenPrice.Equals(input.OpenPrice))
                ) && 
                (
                    this.Margin == input.Margin ||
                    this.Margin.Equals(input.Margin)
                ) && 
                (
                    this.Profit == input.Profit ||
                    this.Profit.Equals(input.Profit)
                ) && 
                (
                    this.Swaps == input.Swaps ||
                    this.Swaps.Equals(input.Swaps)
                ) && 
                (
                    this.OpenConversionRate == input.OpenConversionRate ||
                    this.OpenConversionRate.Equals(input.OpenConversionRate)
                ) && 
                (
                    this.CloseConversionRate == input.CloseConversionRate ||
                    this.CloseConversionRate.Equals(input.CloseConversionRate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OpenTime != null)
                    hashCode = hashCode * 59 + this.OpenTime.GetHashCode();
                if (this.OpenPrice != null)
                    hashCode = hashCode * 59 + this.OpenPrice.GetHashCode();
                hashCode = hashCode * 59 + this.Margin.GetHashCode();
                hashCode = hashCode * 59 + this.Profit.GetHashCode();
                hashCode = hashCode * 59 + this.Swaps.GetHashCode();
                hashCode = hashCode * 59 + this.OpenConversionRate.GetHashCode();
                hashCode = hashCode * 59 + this.CloseConversionRate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
