/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// List of pending orders modified or created with this request.
    /// </summary>
    [DataContract]
    public partial class ResponseModelPendingExecutionReportData :  IEquatable<ResponseModelPendingExecutionReportData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseModelPendingExecutionReportData" /> class.
        /// </summary>
        /// <param name="accountStatus">accountStatus.</param>
        /// <param name="pendingOrders">List of pending orders modified or created with this request..</param>
        public ResponseModelPendingExecutionReportData(AccountStatus accountStatus = default(AccountStatus), List<Object> pendingOrders = default(List<Object>))
        {
            this.AccountStatus = accountStatus;
            this.PendingOrders = pendingOrders;
        }
        
        /// <summary>
        /// Gets or Sets AccountStatus
        /// </summary>
        [DataMember(Name="accountStatus", EmitDefaultValue=false)]
        public AccountStatus AccountStatus { get; set; }

        /// <summary>
        /// List of pending orders modified or created with this request.
        /// </summary>
        /// <value>List of pending orders modified or created with this request.</value>
        [DataMember(Name="pendingOrders", EmitDefaultValue=false)]
        public List<Object> PendingOrders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseModelPendingExecutionReportData {\n");
            sb.Append("  AccountStatus: ").Append(AccountStatus).Append("\n");
            sb.Append("  PendingOrders: ").Append(PendingOrders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseModelPendingExecutionReportData);
        }

        /// <summary>
        /// Returns true if ResponseModelPendingExecutionReportData instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseModelPendingExecutionReportData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseModelPendingExecutionReportData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountStatus == input.AccountStatus ||
                    (this.AccountStatus != null &&
                    this.AccountStatus.Equals(input.AccountStatus))
                ) && 
                (
                    this.PendingOrders == input.PendingOrders ||
                    this.PendingOrders != null &&
                    input.PendingOrders != null &&
                    this.PendingOrders.SequenceEqual(input.PendingOrders)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountStatus != null)
                    hashCode = hashCode * 59 + this.AccountStatus.GetHashCode();
                if (this.PendingOrders != null)
                    hashCode = hashCode * 59 + this.PendingOrders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
