/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// InlineObject3
    /// </summary>
    [DataContract]
    public partial class InlineObject3 :  IEquatable<InlineObject3>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Reality
        /// </summary>
        [DataMember(Name="reality", EmitDefaultValue=false)]
        public Reality Reality { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject3() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        /// <param name="login">Corseponding Account (required).</param>
        /// <param name="reality">reality (required).</param>
        /// <param name="timeFrom">Milliseconds since unix epoch (required).</param>
        /// <param name="timeTo">timeTo (required).</param>
        public InlineObject3(int login = default(int), Reality reality = default(Reality), decimal timeFrom = default(decimal), decimal timeTo = default(decimal))
        {
            // to ensure "login" is required (not null)
            if (login == null)
            {
                throw new InvalidDataException("login is a required property for InlineObject3 and cannot be null");
            }
            else
            {
                this.Login = login;
            }

            this.Reality = reality;
            // to ensure "timeFrom" is required (not null)
            if (timeFrom == null)
            {
                throw new InvalidDataException("timeFrom is a required property for InlineObject3 and cannot be null");
            }
            else
            {
                this.TimeFrom = timeFrom;
            }

            // to ensure "timeTo" is required (not null)
            if (timeTo == null)
            {
                throw new InvalidDataException("timeTo is a required property for InlineObject3 and cannot be null");
            }
            else
            {
                this.TimeTo = timeTo;
            }

        }
        
        /// <summary>
        /// Corseponding Account
        /// </summary>
        /// <value>Corseponding Account</value>
        [DataMember(Name="login", EmitDefaultValue=false)]
        public int Login { get; set; }

        /// <summary>
        /// Milliseconds since unix epoch
        /// </summary>
        /// <value>Milliseconds since unix epoch</value>
        [DataMember(Name="timeFrom", EmitDefaultValue=false)]
        public decimal TimeFrom { get; set; }

        /// <summary>
        /// Gets or Sets TimeTo
        /// </summary>
        [DataMember(Name="timeTo", EmitDefaultValue=false)]
        public decimal TimeTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject3 {\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Reality: ").Append(Reality).Append("\n");
            sb.Append("  TimeFrom: ").Append(TimeFrom).Append("\n");
            sb.Append("  TimeTo: ").Append(TimeTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject3);
        }

        /// <summary>
        /// Returns true if InlineObject3 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject3 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Login == input.Login ||
                    this.Login.Equals(input.Login)
                ) && 
                (
                    this.Reality == input.Reality ||
                    this.Reality.Equals(input.Reality)
                ) && 
                (
                    this.TimeFrom == input.TimeFrom ||
                    (this.TimeFrom != null &&
                    this.TimeFrom.Equals(input.TimeFrom))
                ) && 
                (
                    this.TimeTo == input.TimeTo ||
                    (this.TimeTo != null &&
                    this.TimeTo.Equals(input.TimeTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Login.GetHashCode();
                hashCode = hashCode * 59 + this.Reality.GetHashCode();
                if (this.TimeFrom != null)
                    hashCode = hashCode * 59 + this.TimeFrom.GetHashCode();
                if (this.TimeTo != null)
                    hashCode = hashCode * 59 + this.TimeTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
