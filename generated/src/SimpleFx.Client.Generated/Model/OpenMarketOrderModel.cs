/* 
 * SimpleFX
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SimpleFx.Client.Generated.Client.OpenAPIDateConverter;

namespace SimpleFx.Client.Generated.Model
{
    /// <summary>
    /// OpenMarketOrderModel
    /// </summary>
    [DataContract]
    public partial class OpenMarketOrderModel :  IEquatable<OpenMarketOrderModel>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Reality
        /// </summary>
        [DataMember(Name="Reality", EmitDefaultValue=false)]
        public Reality Reality { get; set; }
        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name="Side", EmitDefaultValue=false)]
        public Side Side { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenMarketOrderModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpenMarketOrderModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenMarketOrderModel" /> class.
        /// </summary>
        /// <param name="reality">reality (required).</param>
        /// <param name="login">Corseponding Account (required).</param>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="side">side (required).</param>
        /// <param name="volume">volume (required).</param>
        /// <param name="isFIFO">FIFO requests closes opposite positions before opening new one. NonFIFO order will open new position regardles if client owns opposite position. (required).</param>
        /// <param name="takeProfit">takeProfit.</param>
        /// <param name="stopLoss">stopLoss.</param>
        /// <param name="requestId">Client defined requestId. Server wiil populate this id in response and trade events..</param>
        public OpenMarketOrderModel(Reality reality = default(Reality), int login = default(int), string symbol = default(string), Side side = default(Side), double volume = default(double), bool isFIFO = default(bool), double takeProfit = default(double), double stopLoss = default(double), string requestId = default(string))
        {
            this.Reality = reality;
            // to ensure "login" is required (not null)
            if (login == null)
            {
                throw new InvalidDataException("login is a required property for OpenMarketOrderModel and cannot be null");
            }
            else
            {
                this.Login = login;
            }

            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new InvalidDataException("symbol is a required property for OpenMarketOrderModel and cannot be null");
            }
            else
            {
                this.Symbol = symbol;
            }

            this.Side = side;
            // to ensure "volume" is required (not null)
            if (volume == null)
            {
                throw new InvalidDataException("volume is a required property for OpenMarketOrderModel and cannot be null");
            }
            else
            {
                this.Volume = volume;
            }

            // to ensure "isFIFO" is required (not null)
            if (isFIFO == null)
            {
                throw new InvalidDataException("isFIFO is a required property for OpenMarketOrderModel and cannot be null");
            }
            else
            {
                this.IsFIFO = isFIFO;
            }

            this.TakeProfit = takeProfit;
            this.StopLoss = stopLoss;
            this.RequestId = requestId;
        }
        
        /// <summary>
        /// Corseponding Account
        /// </summary>
        /// <value>Corseponding Account</value>
        [DataMember(Name="Login", EmitDefaultValue=false)]
        public int Login { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="Symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name="Volume", EmitDefaultValue=false)]
        public double Volume { get; set; }

        /// <summary>
        /// FIFO requests closes opposite positions before opening new one. NonFIFO order will open new position regardles if client owns opposite position.
        /// </summary>
        /// <value>FIFO requests closes opposite positions before opening new one. NonFIFO order will open new position regardles if client owns opposite position.</value>
        [DataMember(Name="IsFIFO", EmitDefaultValue=false)]
        public bool IsFIFO { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfit
        /// </summary>
        [DataMember(Name="TakeProfit", EmitDefaultValue=false)]
        public double TakeProfit { get; set; }

        /// <summary>
        /// Gets or Sets StopLoss
        /// </summary>
        [DataMember(Name="StopLoss", EmitDefaultValue=false)]
        public double StopLoss { get; set; }

        /// <summary>
        /// Client defined requestId. Server wiil populate this id in response and trade events.
        /// </summary>
        /// <value>Client defined requestId. Server wiil populate this id in response and trade events.</value>
        [DataMember(Name="RequestId", EmitDefaultValue=false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenMarketOrderModel {\n");
            sb.Append("  Reality: ").Append(Reality).Append("\n");
            sb.Append("  Login: ").Append(Login).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("  IsFIFO: ").Append(IsFIFO).Append("\n");
            sb.Append("  TakeProfit: ").Append(TakeProfit).Append("\n");
            sb.Append("  StopLoss: ").Append(StopLoss).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenMarketOrderModel);
        }

        /// <summary>
        /// Returns true if OpenMarketOrderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenMarketOrderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenMarketOrderModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reality == input.Reality ||
                    this.Reality.Equals(input.Reality)
                ) && 
                (
                    this.Login == input.Login ||
                    this.Login.Equals(input.Login)
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Side == input.Side ||
                    this.Side.Equals(input.Side)
                ) && 
                (
                    this.Volume == input.Volume ||
                    this.Volume.Equals(input.Volume)
                ) && 
                (
                    this.IsFIFO == input.IsFIFO ||
                    this.IsFIFO.Equals(input.IsFIFO)
                ) && 
                (
                    this.TakeProfit == input.TakeProfit ||
                    this.TakeProfit.Equals(input.TakeProfit)
                ) && 
                (
                    this.StopLoss == input.StopLoss ||
                    this.StopLoss.Equals(input.StopLoss)
                ) && 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Reality.GetHashCode();
                hashCode = hashCode * 59 + this.Login.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                hashCode = hashCode * 59 + this.Side.GetHashCode();
                hashCode = hashCode * 59 + this.Volume.GetHashCode();
                hashCode = hashCode * 59 + this.IsFIFO.GetHashCode();
                hashCode = hashCode * 59 + this.TakeProfit.GetHashCode();
                hashCode = hashCode * 59 + this.StopLoss.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
